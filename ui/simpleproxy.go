package ui

import (
	"fmt"
	"github.com/koho/frpmgr/pkg/config"
	"github.com/koho/frpmgr/pkg/consts"
	"github.com/lxn/walk"
	. "github.com/lxn/walk/declarative"
	"strconv"
)

type SimpleProxyDialog struct {
	*walk.Dialog

	// Proxies generated by this dialog
	// We can get the output when "OK" is clicked
	Proxies []*config.Proxy
	binder  *simpleProxyBinder
	db      *walk.DataBinder

	// title of the dialog
	title string
	// prefix of the proxy name
	prefix string
	// types of the proxy
	types []string
	// The local port of the service
	port uint16
}

type simpleProxyBinder struct {
	RemotePort string
	LocalAddr  string
}

func NewSimpleProxyDialog(title string, prefix string, types []string, port uint16) *SimpleProxyDialog {
	v := new(SimpleProxyDialog)
	v.title = title
	v.prefix = prefix
	v.types = types
	v.port = port
	v.Proxies = make([]*config.Proxy, 0)
	v.binder = &simpleProxyBinder{LocalAddr: "127.0.0.1"}
	return v
}

func (sd *SimpleProxyDialog) View() Dialog {
	var acceptPB, cancelPB *walk.PushButton
	return Dialog{
		Icon:          loadLogoIcon(32),
		AssignTo:      &sd.Dialog,
		Title:         "添加 " + sd.title,
		Layout:        VBox{},
		Font:          consts.TextRegular,
		DefaultButton: &acceptPB,
		CancelButton:  &cancelPB,
		DataBinder: DataBinder{
			AssignTo:   &sd.db,
			DataSource: sd.binder,
		},
		Children: []Widget{
			Composite{
				Layout: Grid{Columns: 2, MarginsZero: true},
				Children: []Widget{
					Label{Text: "远程端口:"},
					LineEdit{Text: Bind("RemotePort", Regexp{"^\\d+$"})},
					Label{Text: "本地地址:"},
					LineEdit{Text: Bind("LocalAddr", Regexp{".+"})},
				},
			},
			VSpacer{},
			Composite{
				Layout: HBox{MarginsZero: true},
				Children: []Widget{
					HSpacer{},
					PushButton{Text: "确定", AssignTo: &acceptPB, OnClicked: sd.onSave},
					PushButton{Text: "取消", AssignTo: &cancelPB, OnClicked: func() { sd.Cancel() }},
				},
			},
		},
	}
}

func (sd *SimpleProxyDialog) onSave() {
	if err := sd.db.Submit(); err != nil {
		return
	}
	for _, proto := range sd.types {
		sect := config.Proxy{
			BaseProxyConf: config.BaseProxyConf{
				Name:      fmt.Sprintf("%s-%s-%s", sd.prefix, proto, sd.binder.RemotePort),
				Type:      proto,
				LocalIP:   sd.binder.LocalAddr,
				LocalPort: strconv.FormatInt(int64(sd.port), 10),
			},
			RemotePort: sd.binder.RemotePort,
		}
		sd.Proxies = append(sd.Proxies, &sect)
	}
	sd.Accept()
}

func (sd *SimpleProxyDialog) Run(owner walk.Form) (int, error) {
	return sd.View().Run(owner)
}

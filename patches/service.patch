--- pkg/mod/github.com/fatedier/frp@v0.37.1/client/service.go	2020-12-13 17:35:17.589647500 +0800
+++ patches/service.go	2020-12-13 18:05:29.501068500 +0800
@@ -20,12 +20,13 @@
 	"errors"
 	"fmt"
 	"io/ioutil"
 	"net"
 	"runtime"
 	"strconv"
+	"strings"
 	"sync"
 	"sync/atomic"
 	"time"

 	"github.com/fatedier/frp/assets"
 	"github.com/fatedier/frp/pkg/auth"
@@ -33,12 +34,13 @@
 	"github.com/fatedier/frp/pkg/msg"
 	"github.com/fatedier/frp/pkg/transport"
 	"github.com/fatedier/frp/pkg/util/log"
 	frpNet "github.com/fatedier/frp/pkg/util/net"
 	"github.com/fatedier/frp/pkg/util/version"
 	"github.com/fatedier/frp/pkg/util/xlog"
+	"github.com/miekg/dns"

 	fmux "github.com/hashicorp/yamux"
 )

 // Service is a client service.
 type Service struct {
@@ -205,12 +207,44 @@
 			svr.ctlMu.Unlock()
 			break
 		}
 	}
 }

+func lookupIP(addr string, server string) (string, error) {
+	if net.ParseIP(addr) != nil {
+		return addr, nil
+	}
+	c := dns.Client{}
+	m := dns.Msg{}
+	if !strings.HasSuffix(addr, ".") {
+		addr += "."
+	}
+	if !strings.Contains(server, ":") {
+		server += ":53"
+	}
+	m.SetQuestion(addr, dns.TypeA)
+	r, _, err := c.Exchange(&m, server)
+	if err != nil {
+		return "", err
+	}
+	if len(r.Answer) == 0 {
+		return "", errors.New(fmt.Sprintf("no record for host '%s' with '%s'", addr, server))
+	}
+	switch v := r.Answer[0].(type) {
+	case *dns.A:
+		return v.A.String(), nil
+	case *dns.AAAA:
+		return v.AAAA.String(), nil
+	case *dns.CNAME:
+		return lookupIP(v.Target, server)
+	default:
+		return "", errors.New(fmt.Sprintf("host '%s' lookup failed with '%s'", addr, server))
+	}
+}
+
 // login creates a connection to frps and registers it self as a client
 // conn: control connection
 // session: if it's not nil, using tcp mux
 func (svr *Service) login() (conn net.Conn, session *fmux.Session, err error) {
 	xl := xlog.FromContextSafe(svr.ctx)
 	var tlsConfig *tls.Config
@@ -228,13 +262,20 @@
 		if err != nil {
 			xl.Warn("fail to build tls configuration when service login, err: %v", err)
 			return
 		}
 	}

-	address := net.JoinHostPort(svr.cfg.ServerAddr, strconv.Itoa(svr.cfg.ServerPort))
+	var addr = svr.cfg.ServerAddr
+	if svr.cfg.DNSServer != "" && runtime.GOOS == "windows" {
+		addr, err = lookupIP(svr.cfg.ServerAddr, svr.cfg.DNSServer)
+		if err != nil {
+			return nil, nil, err
+		}
+	}
+	address := net.JoinHostPort(addr, strconv.Itoa(svr.cfg.ServerPort))
 	conn, err = frpNet.ConnectServerByProxyWithTLS(svr.cfg.HTTPProxy, svr.cfg.Protocol, address, tlsConfig)
 	if err != nil {
 		return
 	}

 	defer func() {
